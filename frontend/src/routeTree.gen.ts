/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as Auth_layoutRouteImport } from './routes/_auth_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutItemsRouteImport } from './routes/_layout/items'
import { Route as LayoutAdminRouteImport } from './routes/_layout/admin'
import { Route as Auth_layoutSignupRouteImport } from './routes/_auth_layout/signup'
import { Route as Auth_layoutResetPasswordRouteImport } from './routes/_auth_layout/reset-password'
import { Route as Auth_layoutRecoverPasswordRouteImport } from './routes/_auth_layout/recover-password'
import { Route as Auth_layoutLoginRouteImport } from './routes/_auth_layout/login'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const Auth_layoutRoute = Auth_layoutRouteImport.update({
  id: '/_auth_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutItemsRoute = LayoutItemsRouteImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutAdminRoute = LayoutAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)
const Auth_layoutSignupRoute = Auth_layoutSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => Auth_layoutRoute,
} as any)
const Auth_layoutResetPasswordRoute =
  Auth_layoutResetPasswordRouteImport.update({
    id: '/reset-password',
    path: '/reset-password',
    getParentRoute: () => Auth_layoutRoute,
  } as any)
const Auth_layoutRecoverPasswordRoute =
  Auth_layoutRecoverPasswordRouteImport.update({
    id: '/recover-password',
    path: '/recover-password',
    getParentRoute: () => Auth_layoutRoute,
  } as any)
const Auth_layoutLoginRoute = Auth_layoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => Auth_layoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/login': typeof Auth_layoutLoginRoute
  '/recover-password': typeof Auth_layoutRecoverPasswordRoute
  '/reset-password': typeof Auth_layoutResetPasswordRoute
  '/signup': typeof Auth_layoutSignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/login': typeof Auth_layoutLoginRoute
  '/recover-password': typeof Auth_layoutRecoverPasswordRoute
  '/reset-password': typeof Auth_layoutResetPasswordRoute
  '/signup': typeof Auth_layoutSignupRoute
  '/admin': typeof LayoutAdminRoute
  '/items': typeof LayoutItemsRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth_layout': typeof Auth_layoutRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/_auth_layout/login': typeof Auth_layoutLoginRoute
  '/_auth_layout/recover-password': typeof Auth_layoutRecoverPasswordRoute
  '/_auth_layout/reset-password': typeof Auth_layoutResetPasswordRoute
  '/_auth_layout/signup': typeof Auth_layoutSignupRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/items': typeof LayoutItemsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/privacy'
    | '/terms'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/privacy'
    | '/terms'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/admin'
    | '/items'
    | '/settings'
    | '/'
  id:
    | '__root__'
    | '/_auth_layout'
    | '/_layout'
    | '/privacy'
    | '/terms'
    | '/_auth_layout/login'
    | '/_auth_layout/recover-password'
    | '/_auth_layout/reset-password'
    | '/_auth_layout/signup'
    | '/_layout/admin'
    | '/_layout/items'
    | '/_layout/settings'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  Auth_layoutRoute: typeof Auth_layoutRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth_layout': {
      id: '/_auth_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Auth_layoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/items': {
      id: '/_layout/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof LayoutItemsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_auth_layout/signup': {
      id: '/_auth_layout/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof Auth_layoutSignupRouteImport
      parentRoute: typeof Auth_layoutRoute
    }
    '/_auth_layout/reset-password': {
      id: '/_auth_layout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof Auth_layoutResetPasswordRouteImport
      parentRoute: typeof Auth_layoutRoute
    }
    '/_auth_layout/recover-password': {
      id: '/_auth_layout/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof Auth_layoutRecoverPasswordRouteImport
      parentRoute: typeof Auth_layoutRoute
    }
    '/_auth_layout/login': {
      id: '/_auth_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof Auth_layoutLoginRouteImport
      parentRoute: typeof Auth_layoutRoute
    }
  }
}

interface Auth_layoutRouteChildren {
  Auth_layoutLoginRoute: typeof Auth_layoutLoginRoute
  Auth_layoutRecoverPasswordRoute: typeof Auth_layoutRecoverPasswordRoute
  Auth_layoutResetPasswordRoute: typeof Auth_layoutResetPasswordRoute
  Auth_layoutSignupRoute: typeof Auth_layoutSignupRoute
}

const Auth_layoutRouteChildren: Auth_layoutRouteChildren = {
  Auth_layoutLoginRoute: Auth_layoutLoginRoute,
  Auth_layoutRecoverPasswordRoute: Auth_layoutRecoverPasswordRoute,
  Auth_layoutResetPasswordRoute: Auth_layoutResetPasswordRoute,
  Auth_layoutSignupRoute: Auth_layoutSignupRoute,
}

const Auth_layoutRouteWithChildren = Auth_layoutRoute._addFileChildren(
  Auth_layoutRouteChildren,
)

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutItemsRoute: typeof LayoutItemsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutItemsRoute: LayoutItemsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  Auth_layoutRoute: Auth_layoutRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
